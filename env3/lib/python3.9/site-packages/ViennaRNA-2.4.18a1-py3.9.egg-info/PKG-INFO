Metadata-Version: 2.1
Name: ViennaRNA
Version: 2.4.18a1
Summary: The ViennaRNA Package consists of a C code library and several stand-alone programs for the prediction and comparison of RNA secondary structures.
Home-page: https://github.com/ayaanhossain/ViennaRNA
Author: Ayaan Hossain
Author-email: auh57@psu.edu
License: UNKNOWN
Project-URL: Bug Reports, https://github.com/ayaanhossain/ViennaRNA/issues
Project-URL: Source, https://github.com/ayaanhossain/ViennaRNA/tree/master/viennarna
Description: ### ViennaRNA
        
        The `ViennaRNA` Package consists of a **C** code library and several stand-alone programs for the prediction and comparison of RNA secondary structures.
        
        RNA secondary structure prediction through energy minimization is the most used function in the package. It provides three kinds of dynamic programming algorithms for structure prediction: the minimum free energy algorithm of Zuker & Stiegler 1981 which yields a single optimal structure, the partition function algorithm of McCaskill 1990 which calculates base pair probabilities in the thermodynamic ensemble, and the suboptimal folding algorithm of Wuchty et.al 1999 which generates all suboptimal structures within a given energy range of the optimal energy. For secondary structure comparison, the package contains several measures of distance (dissimilarities) using either string alignment or tree-editing (Shapiro & Zhang 1990). Finally, it provides an algorithm to design sequences
        with a predefined structure (inverse folding).
        
        In case you are using `ViennaRNA` software for your publications you may want to cite:
        
        ```
        Lorenz, Ronny and Bernhart, Stephan H. and HÃ¶ner zu Siederdissen, Christian and Tafer, Hakim and Flamm, Christoph and Stadler, Peter F. and Hofacker, Ivo L.
        ViennaRNA Package 2.0
        Algorithms for Molecular Biology, 6:1 26, 2011, doi:10.1186/1748-7188-6-26
        ```
        
        ### `RNAlib` API Docs
        
        The API docs can be found at https://www.tbi.univie.ac.at/RNA/ViennaRNA/doc/html/index.html
        
        ### `ViennaRNA` PyPI Installation
        
        Life at last is simple, and the possibilities are endless.
        
        Just open your favorite shell.
        
        ```bash
        $ pip install ViennaRNA
        ```
        
        Sit back, relax and let `pip` do its thing. When everything is installed, verify like so.
        
        ```bash
        $ python
        Python 3.9.5 (default, Jun  4 2021, 12:28:51)
        [GCC 7.5.0] :: Anaconda, Inc. on linux
        Type "help", "copyright", "credits" or "license" for more information.
        >>> import ViennaRNA
        >>> dir(ViennaRNA)
        ['RNA', 'RNAlib', 'ViennaRNA', '__author__', '__builtins__', '__cached__', '__doc__', '__file__', '__license__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', 'main', 'rna', 'rnalib', 'viennarna']
        ```
        
        > **Note** The objects `RNA`, `RNAlib`, `ViennaRNA`, `rna`, `rnalib`, and `viennarna` all refer to the same `RNA` SWIG module that you'd get if you installed the ViennaRNA python interface from source. The statements `from ViennaRNA import RNA` is then equivalent to `from ViennaRNA import rnalib`.
        
        ### Using `ViennaRNA` from PyPI
        
        The PyPI installer was developed so that computational synthetic biologists could specify `ViennaRNA` as a requirement for their `python` applications (via `install_requires` in their `setup.py`), without requiring their users to download and install it separately. Because this is the 21st century, and dependency installation should not deter application adoption. Once installed, you can seamlessly `import RNA`, successfully. Another reason this installer exists is because the `conda` package for `ViennaRNA` is broken, and hasn't been fixed in a while. This installer works under `conda` as well.
        
        Relevant DNA or RNA parameter files will need to be packaged with developed application and supplied to `RNA.read_parameter_file(parameter_file_path)` for proper usage. You may then want to specify those parameter files as part of your `package_data` in your `setup.py`, and make it available to `RNA.read_parameter_file(...)` via `pkg_resource.resource_filename(...)` function.
        
        You can find all of the different DNA and RNA parameters accepted by the `RNA` module in [here](https://github.com/ayaanhossain/ViennaRNA/tree/main/ViennaRNA-2.4.18-Latest/misc).
        
        **Example:** Say, your application is called `awesomeRNA` and your package is structured like the following.
        
        ```
        - awesomeRNA/
            - docs/
            - examples/
            - tests/
            - awesomeRNA/
                - __init__.py
                - awesomeRNA.py
                - utils.py
                - params/
                    - dna_mathews2004.par
                    - rna_andronescu2007.par
            - setup.py
            - setup.cfg
            - README.md
            - LICENSE
        ```
        
        A part of your `setup` function inside `setup.py` may then contain the following.
        
        ```python
        setup(
        
            # stuff before
        
            packages=['awesomeRNA', 'awesomeRNA.params'],
        
            package_dir={
                'awesomeRNA': './awesomeRNA'},
        
            package_data={
                'awesomeRNA': ['params/*.par']},
        
            install_requires=[
                'numpy>=1.19.0',
                'ViennaRNA>=2.4.18,]
        
            # stuff after
        )
        ```
        
        Then in your application code, you can perhaps do the following.
        
        ```python
        import RNA
        import pkg_resources
        
        def awesomeRNA_main(
            seqeuence,
            temperature=37,
            param_name='dna_matthews2004'):
        
            # Basic Setup
            if temperature != 37:
                RNA.cvar.temperature = temperature
            RNA.cvar.dangles = 2
            settings = RNA.md()
        
            # Read Parameters
            parameter_file = pkg_resources.resource_filename(
                'awesomeRNA', 'params/{}.par'.format(
                    param_name))
            RNA.read_parameter_file(parameter_file)
        
            # Calculate MFE and Secondary Structure
            fc_obj = RNA.fold_compound(
                seqeuence,
                settings)
            structure, mfe = fc_obj.mfe()
        
            # Return Results
            return structure, mfe
        
        ```
        
        > **Note** These examples are for demonstrative purposes only.
        
        ### License
        `ViennaRNA` PyPI Installer (c) 2021 Ayaan Hossain.
        
        `ViennaRNA` PyPI Installer is an **open-source software** under [MIT](https://opensource.org/licenses/MIT) License.
        
        See [LICENSE](./LICENSE) file for more details.
        
Keywords: synthetic computational biology genetic DNA RNA secondary structure prediction minimum free energy centroid subopt mfe ViennaRNA dynamic programming
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Classifier: Topic :: Scientific/Engineering :: Chemistry
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Python: !=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, >=3.6.*, <4.0.*
Description-Content-Type: text/markdown
